TreeDistance(phylo, spectra)
?TreeDistance
SharedPhylogeneticInfo(phylo, spectra)
SharedPhylogeneticInfo(phylo, phylo)
SharedPhylogeneticInfo(phylo, as.phylo(nj(dist(pca$x[,1:2]))))
SharedPhylogeneticInfo(phylo, as.phylo(nj(dist(pca$x[,1:20]))))
SharedPhylogeneticInfo(phylo, as.phylo(nj(dist(pca$x[,1:19]))))
SharedPhylogeneticInfo(phylo, as.phylo(nj(dist(pca$x[,1:5]))))
TreeDistance(phylo, spectra)
TreeDistance(phylo, as.phylo(nj(dist(pca$x[,1:5]))
)
)
TreeDistance(phylo, phylo)
TreeDistance(phylo, as.phylo(nj(dist(pca$x[,1:10]))))
TreeDistance(phylo, as.phylo(nj(dist(pca$x[,1:19]))))
TreeDistance(phylo, as.phylo(nj(dist(m2))))
phylosig_spectra = apply(m2[match(phylo$tip.label, rownames(m2)),], 2, function(x) phylosig(phylo, x, method = 'lambda')[1]$lambda)
plot(phylosig_spectra, type = 'l')
dev.off()
plot(phylosig_spectra, type = 'l')
#By windows
len = 10
win = split_with_overlap(t(m2), len, len-1)[1:(ncol(m2)-len)]
win_phy = list()
for(i in 1:length(win)){
p = prcomp(t(win[[i]]))
p = p$x[match(phylo$tip.label, rownames(p$x)),2]
mn = colMeans(win[[i]])
mn = phylosig(phylo, mn, method = 'lambda')[1]$lambda
p = phylosig(phylo, p, method = 'lambda')[1]$lambda
l = list(mn, p)
names(l) = c('mean', 'pca')
win_phy[[as.character(i)]] = l
}
pc = unlist(lapply(win_phy, function(x) x$pca))
mn = unlist(lapply(win_phy, function(x) x$mean))
plot(pc, type = 'l')
#By windows
len = 100
win = split_with_overlap(t(m2), len, len-1)[1:(ncol(m2)-len)]
win_phy = list()
for(i in 1:length(win)){
p = prcomp(t(win[[i]]))
p = p$x[match(phylo$tip.label, rownames(p$x)),2]
mn = colMeans(win[[i]])
mn = phylosig(phylo, mn, method = 'lambda')[1]$lambda
p = phylosig(phylo, p, method = 'lambda')[1]$lambda
l = list(mn, p)
names(l) = c('mean', 'pca')
win_phy[[as.character(i)]] = l
}
pc = unlist(lapply(win_phy, function(x) x$pca))
mn = unlist(lapply(win_phy, function(x) x$mean))
plot(pc, type = 'l')
phylosig_pcs = apply(pca$x[match(phylo$tip.label, rownames(pca$x)),], 2, function(x) phylosig(phylo, x, method = 'lambda')[1]$lambda)
phylosig_pcs
plot(pca$x[,4])
plot(pca$rotation[,4])
plot(pca$rotation[,4], type = 'l')
plot(pc,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
#Plot
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(0,1))
n
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n'
xlab = 'Wavenumber',
ylim = c(0,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
par(mfrow = c(length(ord)+1,1), mar = c(0.25, 0.25, 0.25, 0.25))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
##Plot spectra
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add mean
lines(m2[grep(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
}
par(mfrow = c(length(ord)+1,1), mar = c(0.25, 0.25, 0.25, 0.25))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
dev.off()
par(mfrow = c(length(ord)+1,1))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
#Set up plot
par(mfrow = c(length(ord)+1,1), mar = c(1, 1, 1, 1))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add mean
lines(m2[grep(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
}
library(ArcadiaColorBrewer)
devtools::install_github('Arcadia-Science/arcadia-color-brewer')
devtools::install_github('Arcadia-Science/arcadia-color-brewer', force = TRUE)
library(ArcadiaColorBrewer)
arcadia.pal()
darken_color <- function(color, factor=1.4){
col <- col2rgb(color)
col <- col/factor
col <- rgb(t(col), maxColorValue=255)
col
}
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add mean
lines(m2[grep(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
}
length(ord)
par(mfrow = c((length(ord)+1),1), mar = c(1, 1, 1, 1))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
##Plot spectra
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,], col = alpha(cols[i], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Add mean
lines(m2[grep(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
}
dev.off()
par(mfrow = c(2,1))
par(mfrow = c(2,1))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Initiate plot
plot(tmp[1,], col = alpha(cols[1], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Loop through and plot
for(i in 1:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Add mean
lines(m2[grep(ord[i], rownames(m2)),], lwd = 2, col = darken_color(cols[i], factor = 2))
}
length(tmp[1,])
#Set up plot
par(mfrow = c(2,1))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Extract spectra
tmp = x[grep(ord[1], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,1:length(phylosig_spectra)], col = alpha(cols[1], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Loop through and plot
for(i in 2:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Add mean
lines(m2[grep(ord[i], rownames(m2)),]:length(phylosig_spectra), lwd = 2, col = darken_color(cols[i], factor = 2))
}
wrnings()
warnings()
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Extract spectra
tmp = x[grep(ord[1], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,][1:length(phylosig_spectra)], col = alpha(cols[1], 0.05), type = 'l', bty = 'n', xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
#Loop through and plot
for(i in 2:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Add mean
lines(m2[grep(ord[i], rownames(m2)),][1:length(phylosig_spectra)], lwd = 2, col = darken_color(cols[i], factor = 2))
}
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
par(mfrow = c(2,1))
n = c(78, which(round(wav)%in% seq(500, 1750, 250)))
plot(phylosig_spectra,
type = 'l',
xaxt = 'n',
ylab = 'Phylogenetic signal',
cex.axis = 1.5,
cex.lab = 1.5,
bty = 'n',
xlab = 'Wavenumber',
ylim = c(0,1))
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
#Order
ord = rev(phylo$tip.label)
#Get colors (to color by family)
g = unlist(lapply(strsplit(ord, '_'), function(x) x[1]))
cols = c(arcadia.pal(n = 6, name = 'Accent'), arcadia.pal(n = 6, name = 'Lighter_accents'))[1:length(unique(g))]
names(cols) = unique(g)
cols = cols[match(g, names(cols))]
#Extract spectra
tmp = x[grep(ord[1], paste(pred$Genus, pred$Species, sep = '_')),]
#Initiate plot
plot(tmp[1,][1:length(phylosig_spectra)],
col = alpha(cols[1], 0.05),
type = 'l',
bty = 'n',
xaxt = 'n',
yaxt = 'n',
cex.axis = 1.5,
xlab = 'Wavenumber',
ylab = '')
#Loop through and plot
for(i in 2:length(ord)){
#Extract spectra
tmp = x[grep(ord[i], paste(pred$Genus, pred$Species, sep = '_')),]
#Add mean
lines(m2[grep(ord[i], rownames(m2)),][1:length(phylosig_spectra)], lwd = 2, col = darken_color(cols[i], factor = 2))
}
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
#Plot
plot(0:round(max(cophen$Freq)),
unlist(p_mean))
dev.off()
plot(0:round(max(cophen$Freq)),
unlist(p_mean),
type = 'l')
#Plot standard error as polygons
polygon(c(seq(1, length(p_mean), 1),
rev(seq(1, length(p_mean), 1))),
c(p_mean-p_se,
rev(p_mean+sp_se)),
col = 'grey90',
border = FALSE)
p_mean
#Calculate mean
p_mean = unlist(lapply(cophen_time, function(x) mean(x$Freq)))
p_se = unlist(lapply(cophen_time, function(x) std.error(x$Freq)))
#Plot
plot(0:round(max(cophen$Freq)),
p_mean,
type = 'l')
#Plot standard error as polygons
polygon(c(seq(1, length(p_mean), 1),
rev(seq(1, length(p_mean), 1))),
c(p_mean-p_se,
rev(p_mean+sp_se)),
col = 'grey90',
border = FALSE)
#Plot standard error as polygons
polygon(c(seq(1, length(p_mean), 1),
rev(seq(1, length(p_mean), 1))),
c(p_mean-p_se,
rev(p_mean+p_se)),
col = 'grey90',
border = FALSE)
p_mean-p_se
#Plot
plot(0:round(max(cophen$Freq)),
p_mean,
type = 'l')
#Plot standard error as polygons
polygon(c(0:round(max(cophen$Freq)),
rev(0:round(max(cophen$Freq)))),
c(p_mean-p_se,
rev(p_mean+p_se)),
col = 'grey90',
border = FALSE)
plot(p_mean,
type = 'l')
#Plot standard error as polygons
polygon(c(seq(1, length(p_mean), 1),
rev(seq(1, length(p_mean), 1))),
c(p_mean-p_se,
rev(p_mean+p_se)),
col = cols[i],
border = FALSE)
seq(1, length(p_mean), 1)
plot(p_mean,
type = 'l')
plot(phylosig_spectra, type = 'l')
plot(wav, phylosig_spectra, type = 'l')
abline(v = 536)
abline(v = 560)
abline(v = 1332)
abline(v = 1307)
abline(v = 1371)
abline(v = 1250)
abline(v = 1266)
abline(v = 1360)
abline(v = 1391)
#Load genome sizes
size = read.csv('00_data/ho_et_al_2019/ho_2019_genome_statistics.csv')
#Match genome size matrix to order of spectral data
size = size[match(rownames(pca$x), gsub(' ', '_', size$Genome)),]
#Calculate pca
pca = prcomp(m2)
#Linear model
summary(lm(pca$x[,2]~size$media_gc_content+size$median_genome_size+size$median_protein_count))
#Compare to phylogenetic signal
par(mfrow = c(1,2))
plot(apply(m2, 2, function(x) cor(x, size$median_genome_size)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
plot(wav, phylosig_spectra, type = 'l')
par(mfrow = c(2,1))
plot(apply(m2, 2, function(x) cor(x, size$median_genome_size)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
plot(wav, phylosig_spectra, type = 'l')
plot(apply(m2, 2, function(x) cor(x, size$media_gc_content)),
type = 'l',
xaxt = 'n',
ylab = 'Correlation coeff.',
cex.axis = 1.5,
cex.lab = 1.5,
xlab = 'Wavenumber',
ylim = c(-1,1))
title(main = 'Genome size', font.main = 1, cex.main = 1.5)
axis(1, n, seq(500, 1750, 250), cex.axis = 1.5)
plot(wav, phylosig_spectra, type = 'l')
size$media_gc_content
cor(apply(m2, 2, function(x) cor(x, size$media_gc_content)),
phylosig_spectra)
cor(apply(m2, 2, function(x) cor(x, size$median_protein_count)),
phylosig_spectra)
phens <- pd$read_pickle("~/Desktop/phen_pleio_int_01_0_1.pk")
#Generate naming vectors
p_pleio = paste(rep('pleio', length(seq(0, 1, 0.01))), seq(0, 1, 0.01), sep = '')
p_int = paste(rep('int', length(seq(0, 1, 0.01))), seq(0, 1, 0.01), sep = '')
#Combine phenotypes into matrices
for(i in 1:length(phens)){
for(j in 1:length(phens[[i]])){
phenos[[paste(p_pleio[i], p_int[j], sep = '_')]] = do.call(cbind, phens[[i]][[j]])
}
}
#Compare linear vs. nonlinear
counter <- 0
pb <- txtProgressBar(min = 1,
max = length(phenos),
style = 3,
width = 50,
char = ".")
res = lapply(phenos, function(x){
counter <<- counter + 1
setTxtProgressBar(pb, counter)
compare_nonlinear(x[,1:20])})
length(phens)
counter <- 0
pb <- txtProgressBar(min = 1,
max = length(phenos),
style = 3,
width = 50,
char = ".")
res = lapply(phenos, function(x){
counter <<- counter + 1
setTxtProgressBar(pb, counter)
compare_nonlinear(x[1:10,1:10])})
length(phenos$pleio0_int0)
phenos$pleio0_int0
dim(phenos$pleio0_int0)
compare_nonlinear(phenos$pleio0_int0)
compare_nonlinear(phenos$pleio0_int0[1:100,])
